<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_plr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
grav = 0.6;
hsp = 0;
vsp = 0;
jumpspeed = -12;
movespeed = 6;
ladder = false;
onground = false;
hp = 100;
image_speed = 0.5;
global.dir = 0;
ammo = 10;
canatk = true;
cantp = true;
tprange = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Input
script_execute(scr_input)
//End of Input
//Results for inputs
    move = key_right - key_left;
    hsp = move * movespeed; 
    if (vsp &lt; 20) vsp += grav;
    if (place_meeting(x,y+1,obj_block))
    {
    vsp = key_jump * jumpspeed
    }
//End of input results

//applying result

    //hcoll
    if (place_meeting(x+hsp,y,obj_block))
    {
        while(!place_meeting(x+sign(hsp),y,obj_block))
        {
            x += sign(hsp);
        }
        hsp = 0;
    }
    x += hsp;
    //End of hcoll
    
    //vcoll
    if (place_meeting(x,y+vsp,obj_block))
    {
        while(!place_meeting(x,y+sign(vsp),obj_block))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
    //End of vcoll
//End of applying result

//Ladders

    if (key_up || key_down || place_meeting(x,y,obj_ladder)) 
    {
        if place_meeting(x,y-1, obj_ladder) ladder = true;
    }
    
    if (ladder = true) 
    {
        vsp = 0;
        //hsp = 0;
        if (key_up) vsp = -2;
        if (key_down) vsp = 2;
        if !place_meeting (x,y,obj_ladder) ladder = false;
        if (key_jump) ladder = false;
    }
//End of Ladders

//Animation

    if keyboard_check_pressed (ord("A"))
    {
        
        sprite_index = spr_plr_move
        image_xscale = 1
        image_index = 0
        global.dir = 180
    }
    
    if keyboard_check_pressed (ord("D"))
    {
        
        sprite_index = spr_plr_move
        image_xscale = -1
        image_index = 0
        global.dir = 0
    }
    //Changes animation mid-air when jumping
        if (sprite_index = spr_plr_idle and hsp &gt; 1)
        {
            
            sprite_index = spr_plr_move
        }
    
    
    
    if place_meeting (x,y+1,obj_block)
    {
    onground = true
        if (onground)
        {
            if (hsp == 0)
            {
                image_speed = 0.3;
                sprite_index = spr_plr_idle;
            }
        }
    }
    
    //Ladder animation change
    
    if (ladder &amp;&amp; key_up)
    {
        if (sprite_index = spr_plr_idle)
        {
            sprite_index = spr_plr_ladder
        }
    }
    //End of Ladder animation change
    
//End of Animation
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat
//Inputs
    script_execute(scr_input);
//End of Inputs
//Shooting
    if (key_shoot)
    {
        if (canatk)
        {
            if (ammo != 0)
            {
                ammo -= 1;
                instance_create(x,y,obj_bullet);
            }
        }
    }
    //End of Shooting
    
    //Melee
        
    //End of Melee
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport
//Input
script_execute(scr_input);
//End of Input

//Variabls
invert_x = false;
invert_y = false;
m_x = mouse_x;
m_y = mouse_y;
tar_x = m_x - x
tar_y = m_y - y
//This part inverts the result of the tp so that plr can go right and up
if (tar_x &lt; 0)
{
    tar_x = tar_x * -1
    invert_x = true
}
if (tar_y &lt; 0)
{
    tar_y = tar_y * -1
    invert_y = true   
}

//End
if (key_tp)
{
    if (cantp) 
    {
            if (tar_x &lt; tprange &amp;&amp; invert_x = false)
            {
            x += tar_x;
            }
            if (tar_x &lt; tprange &amp;&amp; invert_x = true)
            {
            x -= tar_x;
            }
            if (tar_x &gt; tprange &amp;&amp; invert_x = false)
            {
            x += tprange;
            }
            if (tar_x &gt; tprange &amp;&amp; invert_x = true)
            {
            x -= tprange;
            }
            if (tar_y &lt; tprange &amp;&amp; invert_y = false)
            {
            y += tar_y;
            }
            if (tar_y &gt; tprange &amp;&amp; invert_y = false)
            {
            y += tprange;
            }
            if (tar_y &lt; tprange &amp;&amp; invert_y = true)
            {
            y -= tar_y;
            }
            if (tar_y &gt; tprange &amp;&amp; invert_y = true)
            {
            y -= tprange;
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if distance_to_object (obj_block) &gt; 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(5,5,ammo)
draw_text(20,20,mouse_x)
draw_text(20,40, mouse_y)
draw_text(20,60, x)
draw_text(20,80, y)
draw_healthbar(x-5,y-5,x+5,y+5,hp,c_black,c_red,c_green, 0,true,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 464
y = 464
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
